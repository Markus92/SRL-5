(*
Globals
====


.. contents::

*)
//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--               » Global Variables                            --//
//-----------------------------------------------------------------//
// * procedure LoadSRLBitMaps;                                     // by SRL Dev Team
// * procedure FreeSRLBitMaps;                                     // by Ron
// * procedure LoadSRLFonts;                                       // by Markus
// * procedure FreeSRLFonts;                                       // by Markus
// * procedure srl_Warn(ProcName, ErrorMessage: String; wVersion: Integer); // by SRL Dev Team
// * procedure SetupBoxes;                                         // by the SRL Dev Team & MylesMadness
// * function srl_InFight: Boolean;                                // by Frement

{ const SRLVersionNumber;
  Description: Repository Version Number. }
const
  SRLVersionNumber = 38;

{ var TalkAfterRandoms: Boolean;
  Description: Talk random phrases after randoms are detected/solved. }
var
  TalkAfterRandoms: Boolean;

{ var WorldSwitcherEnabled: Boolean;
  Description: Enables world switching. }

var
  WorldSwitcherEnabled: Boolean;

{ var FriendChars, LoginChars: Integer;
  Description: Fonts used internally and for use in scripts. }
{$IFDEF LoadExtraFonts}
var
  FriendChars, LoginChars: Integer;
{$ENDIF}

{ var bmpAdmin, bmpMod, Lamp, BoxMask: Integer;
  Description: Global Bitmaps. Need to be Global because of SCAR Memory leaks. }
var
  bmpAdmin, bmpMod, Lamp, BookOfKnowledge: Integer;

{ var RoadColor, WaterColor, BankColor: Integer;
  Description: Three variables you will almost always use. :) }
var
  RoadColor, WaterColor, BankColor: Integer;

{ var LampSkill: String;
  Description: Set Lamp skill. }
var
  LampSkill: string;

{ const srl_outline_black
  Description: Black Color outline}
const
  srl_outline_black = 131072;
  srl_outline_white = clWhite;
  
{ const MMX1, MMY1, MMX2, MMY2;
  Description: MiniMap Edge Points. }
const
  MMX1 = 550;
  MMY1 = 8;
  MMX2 = 703;
  MMY2 = 161;

{ const MMCX, MMCY;
  Description: MiniMap Centre Point. }
const
  MMCX = 627;
  MMCY = 85;

{ const MSX1, MSY1, MSX2, MSY2;
  Description: Main Screen EdgePoints. }
const
  MSX1 = 4;
  MSY1 = 4;
  MSX2 = 515;
  MSY2 = 337;

{ const MSCX, MSCY;
  Description: Main Screen Centre Points. }
const
  MSCX = 259;
  MSCY = 170;

{ const MIX1, MIY1, MIX2, MIY2;
  Description: Inventory EdgePoints. }
const
  MIX1 = 547;
  MIY1 = 202;
  MIX2 = 737;
  MIY2 = 466;

{ const MICX, MICY;
  Description: Inventory Centre Points. }
const
  MICX = 642;
  MICY = 334;

{ const MCX1, MCY1, MCX2, MCY2;
  Description: Chat Screen EdgePoints. }
const
  MCX1 = 4;
  MCY1 = 342;
  MCX2 = 514;
  MCY2 = 475;

{ const MCCX, MCCY;
  Description: Chat Screen Centre Points. }
const
  MCCX = 250;
  MCCY = 401;
  
{ const MBX1, MBY1, MBX2, MBY2;
  Description: BankScreen EdgePoints (where you click the items, does not include tabs). }
const
  MBX1 = 26;
  MBY1 = 84;
  MBX2 = 480;
  MBY2 = 292;

{ const DBX1, DBY1, DBX2, DBY2;
  Description: Deposit box edgepoints (only where the item appear) }
const
  DBX1 = 91;
  DBY1 = 57;
  DBX2 = 443;
  DBY2 = 262;

{ const SRL_Procs Constants;
  Description: Constants for SRL_Procs. }
const
  srl_AntiBan          = 0;   // Your AntiBan procedure to be called during various SRL functions and procedures. (Flag, FFlag)
  srl_OnFindMod        = 1;   // After a player or Jagex mod is detected talking in the chat box.
  srl_OnFindDead       = 2;   // After the text 'Oh dear you are dead' is detected.
  srl_OnFindFight      = 3;   // After detecting a fighting random.
  srl_OnFindTrade      = 4;   // After the trade has been attempted (either success or failure).
  srl_OnNextPlayer     = 5;   // While the players are logged out and before CurrentPlayer changes.
  srl_OnSendStats      = 6;   // After SRL Script Stats are sent to the server.
  srl_OnRandomCall     = 7;   // Called in FindNormalRandoms, FindInventoryRandoms, FindNonInventoryRandoms. (NOT ONLY WHEN RANDOMS ARE DETECTED).
  srl_OnFindRandom     = 8;   // After a random event is detected. (FNR, FIR, FNIR, FT)
  srl_OnLogOut         = 9;   // Just before the player is logged out.
  srl_InNextPlayerLoop = 10;  // During the infinite loop in NextPlayer when all players are inactive.
  srl_OnCustomRC       = 11;  // When custom RC trigger has been given.
  srl_OnExitToLobby    = 12;  // On exit to lobby
  srl_OnLogIn          = 13;  // Right after player has successfully logged in.

{ var SRL_Procs: array [0..12] of procedure();
  Description: Varibles to store user-defined procs to be called in SRL. }
var
  SRL_Procs: array [0..13] of procedure();
  SRL_OnFindRandomCall : function(var Cont : boolean) : boolean;
  
{ const GameTab Constants;
  Description: Constants representing gametab numbers. }
const
  tab_Combat = 21;
  tab_Diary = 22;
  tab_Task = 22;
  tab_Stats = 23;
  tab_Quest = 24;
  tab_Inv = 25;
  tab_Equip = 26;
  tab_Prayer = 27;
  tab_Magic = 28;
  tab_Objectives = 29;
  tab_Friends = 30;
  tab_Ignore = 30;
  tab_FriendChat = 31;
  tab_Clan = 32;
  tab_Options = 33;
  tab_Emotes = 34;
  tab_Music = 35;
  tab_Notes = 36;
  tab_LogOut = 37;
  
{ type TAutoColorInfo;
  Description: Set of information that can be used in some functions. }
type
  TAutoColorInfo = record
    Name: string;
    Color: Integer;
    ColorArray: TIntegerArray;
    MinCount: Integer;
    MaxCount: Integer;
    MaxDist: Integer;
    MaxDistCenter: Integer;
    UpText: string;
    UpTextMulti: TStringArray;
    HueMod, SatMod: Extended;
    LumTol: Integer;
    MinR, MaxR, MinG, MaxG, MinB, MaxB: Integer;
    MinX, MaxX, MinY, MaxY, MinZ, MaxZ: Extended;
end;

{ type fnct_ActionOptions;
  Description: Action options. }
type
  fnct_ActionOptions = (aoClickLeft,aoClickRight,aoMove,aoNothing);

var
{ var ACArr
  Description: Stores the information needed for the autocolour functions }
  acArr: array of TAutoColorInfo;

{ var isACLoaded
  Description: Boolean array to make sure that all TAutoColorInfos are loaded
               prior to calling. Optimizes AutoColors significantly }
  isACLoaded: array of Boolean;

{ var Smart_Server: Integer;
  Description: Smart Server to Load. }
var
  Smart_Server: Integer;

{ var Smart_Members, Smart_Signed, Smart_SuperDetail: Boolean
  Description: Smart Options to Load. }
var
  Smart_Members, Smart_Signed, Smart_SuperDetail: Boolean;

{ var WarnSensitivity: Integer
  Description: var for srl_Warn. }
var
  WarnSensitivity: Integer; //-2 will show Warnings and above, -3 notices too.

{ const srl_Warn Constants;
  Description: Constants for srl_Warn. }
const
  warn_AllVersions = 0;
  warn_Terminate = -1;
  warn_Warning = -2;
  warn_Notice = -3;
  warn_Debug = -4;

{var   SRLBitmapsLoaded : boolean;
  Description: True if SRL bmps/DTMs are loaded}
var
  SRLBitmapsLoaded : boolean;

//****************************************************************************//
// * I tried to make these Bitmaps Local, but I got after a couple of hours
// *  running scripts, CTB and DB handle errors. So sorry, declared them global
//****************************************************************************//

(*
LoadSRLBitmaps
~~~~~~~~~

.. code-block:: pascal

    procedure LoadSRLBitMaps;

Loads SRL Bitmaps into memory.

.. note::

    by SRL Dev Team

Example:

.. code-block:: pascal

*)
procedure LoadSRLBitMaps;
begin
  bmpMod := BitmapFromString(9, 6, 'beNqbPn0RWeDBgwdAkgEMkBnT' +
       'p0+HS6GR+KVwAgAGXFQr');
  bmpAdmin := BitmapFromString(9, 6, 'beNqbp/j9PwcZ6P//FiDJAA' +
       'bIjGvzFOFSaCR+KZwIALniVEk=');
  Lamp := DTMFromString('78DA6374626260D06164400655530218FE036' +
       '990E87F20603405AAD14255C3C0C0042661A28CF640BE260135EE' +
       '44A809C0740F56738C08A87124428D3590AF8B5F0D00A9150A05');
  BookOfKnowledge := DTMFromString('78DA63CC65626078C480028A7273183480342' +
       '310FF0702C64CA09AAB0C6880094C3242798CE540FE2D026ACA80' +
       'FC1704D4E401F99F08A84900F2DF12509304E43FC0AF0600CF790' +
       'EC3');
  SRLBitmapsLoaded := True;
  SetBitmapName(bmpMod,'SRL - Mod bitmap');
  SetBitmapName(bmpAdmin,'SRL - Admin bitmap');
  SetDTMName(Lamp,'SRL - Lamp bitmap');
end;

(*
FreeSRLBitmaps
~~~~~~~~~

.. code-block:: pascal

    procedure FreeSRLBitMaps;

Frees SRL Bitmaps from memory.

.. note::

    by Ron

Example:

.. code-block:: pascal

*)
procedure FreeSRLBitmaps;
begin
  if SRLBitmapsLoaded then
  begin
    FreeBitmap(bmpMod);
    FreeBitmap(bmpAdmin);
    FreeDTM(Lamp);
    FreeDTM(BookOfKnowledge);
    SRLBitmapsLoaded := False;
  end;
end;

(*
LoadSRLFonts
~~~~~~~~~

.. code-block:: pascal

    procedure LoadSRLFonts;

Loads SRL Fonts into memory.

.. note::

    by Markus

Example:

.. code-block:: pascal

*)
procedure LoadSRLFonts;
begin
{$IFDEF LoadExtraFonts}
  FriendChars := LoadChars2(FontPath + 'FriendChars/');
  LoginChars := LoadChars2(FontPath +  'LoginChars/');
{$ENDIF}
end;

(*
FreeSRLFonts
~~~~~~~~~

.. code-block:: pascal

    procedure FreeSRLFonts;

Frees SRL Fonts from memory.

.. note::

    by Markus

Example:

.. code-block:: pascal

*)
procedure FreeSRLFonts;
begin
{$IFDEF LoadExtraFonts}
  FreeChars2(FriendChars);
  FreeChars2(LoginChars);
{$ENDIF}
end;

(*
srl_Warn
~~~~~~~~~

.. code-block:: pascal

    procedure srl_Warn(ProcName, ErrorMessage: String; wVersion: Integer);

WriteLn's a warning message.

.. note::

    by SRL Dev Team

Example:

.. code-block:: pascal

    try
      FindTree;
    except
      srl_Warn('FindTree', 'Through an error', warn_AllVersions);
    end;

*)
procedure srl_Warn(ProcName, ErrorMessage: String; wVersion: Integer);
begin
  if (wVersion >= WarnSensitivity) then
    if (wVersion <> warn_Debug) then
      WriteLn('** Warning in ' + ProcName + ': ' + ErrorMessage + '**')
    else
      WriteLn('Debugging ' + ProcName + ': ' + ErrorMessage);
  if wVersion = warn_Terminate then
    TerminateScript;
end;

{ MainScreen, Minimap, Inventory, Chat, Bank boxes as TBox }
var
  MSBox, MMBox, MIBox, MCBox, MBBox: TBox;

(*
SetupBoxes
~~~~~~~~~

.. code-block:: pascal

    Procedure SetupBoxes;

Sets up Box variables

.. note::

    by SRL Dev Team & MylesMadness

Example:

.. code-block:: pascal

*)
Procedure SetupBoxes;
begin
  MSBox := IntToBox(MSX1, MSY1, MSX2, MSY2);
  MMBox := IntToBox(MMX1, MMY1, MMX2, MMY2);
  MIBox := IntToBox(MIX1, MIY1, MIX2, MIY2);
  MCBox := IntToBox(MCX1, MCY1, MCX2, MCY2);
  MBBox := IntToBox(MBX1, MBY1, MBX2, MBY2);
end;


{ const HP_BAR constants;
   Global contants storing width, height and tolerance for HP bars.
   Used in srl_InFight. }
const
  HP_BAR_TOL = 3;
  HP_BAR_WIDTH = 57;
  HP_BAR_HEIGHT = 7;

(*
srl_InFight
~~~~~~~~~

.. code-block:: pascal

    function srl_InFight: Boolean;

Checks whether player currently is in a fight, using mainscreen
HP bar presence detection. Returns True if Player's HP bar is detected.
Idea for improvement: Also check using PixelShift(); to see whether Player
is performing fighting animations to further improve the certainty of results.

.. note::

    by Frement

Example:

.. code-block:: pascal

    while srl_InFight do
    begin
      CheckHP;
      EatFood;
    end;

*)
function srl_InFight: Boolean;
var
  X, Y, HPBarCorner: Integer;
begin
  HPBarCorner := DTMFromString('78DA6364646060606540051A108A11CA6504315888' +
       '50C34C841A26026A988854C348400D33116A588850C34A841A36C26A0046A001D4');
  Result := FindDTM(HPBarCorner, x, y, MSCX - 40, MSCY - 170, MSCX + 40, MSCY);
  FreeDTM(HPBarCorner);
end;
