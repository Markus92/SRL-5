//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--               » Common AntiRandom Routines                  --//
//-----------------------------------------------------------------//
// * procedure TakeScreen(reason: String);                     // * by Mutant Squirrle edit by yakman
// * function SRL_GetBlackBackground: Integer;                 // * by ZephyrsFury
// * function InBlack: Boolean;                                // * by EvilChicken!
// * function PercentBlackMM: Integer;                         // * by NaumanAkhlaQ
// * function InConvo: Boolean;                                // * by ZephyrsFury
// * function AreTalking: Boolean;                             // * by Wizzup?
// * function GetMusic: string;                                // * by Nielsie95 and ZephyrsFury
// * function IntArrayMatch(Ar1, Ar2: TIntegerArray): Boolean; // * by Nielsie95
//-----------------------------------------------------------------//

{ Type TRandomObject
  Contains data that's useful when analyzing rotating 3D objects. }
Type
  TRandomObject = Record
    AvgWidth       : Integer;
    AvgHeight      : Integer;
    AvgCount       : Integer;
    MinLum         : Extended;
    MaxLum         : Extended;
  End;
  TRandomObjectArray = Array Of TRandomObject;
  
{var ScreenShots: Boolean
  Description: Whether screenshots should be saved when a random is detected.}
Var
   ScreenShots: Boolean;

{*******************************************************************************
procedure TakeScreen(reason: String);
by: Mutant Squirrle edit yakman
Description: Takes a screenshot if the global Screenshots is true,
Adds +TimeRunning+ to the path, so no screenshots will overwrite each other.
Adds '.bmp' to the end, will not crash the script if it goes wrong.
*******************************************************************************}

procedure TakeScreen(Reason: string);
begin
  if(not Screenshots)then Exit;
  try
   SaveScreenshot(SRLSavePath + reason + ' ' + TimeRunning + '.bmp');
   WriteLn('Screenshot of: ' + reason + ' ' + TimeRunning);
  except
   Writeln('Failed to save screenshot of: ' + reason);
  end;
end;

{*******************************************************************************
function SRL_GetBlackBackground: Integer;
by: ZephyrsFury
Description: Autocolours the black background colour. Returns -1 if not found.
*******************************************************************************}

function SRL_GetBlackBackground: Integer;
var
  CTS, I, H, C, Count, MaxC: Integer;
  TPA: TPointArray;
  Cols: TIntegerArray;
begin
  Result := -1;
  if (not(LoggedIn)) then Exit;
  CTS := GetColorToleranceSpeed;

  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(100, 100);
  FindColorsTolerance(TPA, clBlack, MMX1, MMY1, MMX2, MMY2, 3);
  SetColorSpeed2Modifiers(0.2, 0.2);
  ColorToleranceSpeed(CTS);
  if (Length(TPA) < 1) then Exit;

  Cols := GetColors(TPA);
  ClearSameIntegers(Cols);

  H := High(Cols);
  for I := 0 to H do
  begin
    C := Cols[I];
    Count := CountColor(C, MMX1, MMY1, MMX2, MMY2);
    if (CountColor(C, MMX1, MMY1, MMX2, MMY2) > MaxC) then
    begin
      Result := C;
      MaxC := Count;
    end;
  end;

end;


{*******************************************************************************
function InBlack: Boolean;
by: EvilChicken!, coords taken from WT-Fakawi's old function.
Description: Checks for the existence of 4 blackdots in MM indicating a random event has occured.
Checks MMpixels Upper N-E-S-W USE WITH CARE: DONT USE IN DUNGEONS I.E. MININGGUILD.
*******************************************************************************}

function InBlack: Boolean;
var
  Coords: array [1..4] of TPointArray;
  I, I2: Byte;
  BBg: Integer;

begin
  Result := False;
  if not LoggedIn then exit;

  Coords[1] := [Point(650, 155), Point(650, 145), Point(650, 135), Point(650, 125)];
  Coords[2] := [Point(650, 15), Point(650, 25), Point(650, 35), Point(650, 45)];
  Coords[3] := [Point(580, 82), Point(590, 82), Point(600, 82), Point(610, 82)];
  Coords[4] := [Point(714, 82), Point(704, 82), Point(694, 82), Point(684, 82)];

  BBg := SRL_GetBlackBackground;

  for I := 1 to 4 do
    for I2 := 0 to 3 do
      if (GetColor(Coords[I][I2].X, Coords[I][I2].Y) = BBg) then
      begin
        if I2 = 3 then
        begin
          Result := True;
          Exit;
        end;
      end else
        Break;
end;

{*******************************************************************************
function PercentBlackMM: Integer;
by: NaumanAkhlaQ
Description: The percentage of the minimap which is black (colour 0 with tol 1).
*******************************************************************************}
function PercentBlackMM: Integer;
begin
  Result := PercentColorMM(SRL_GetBlackBackground, 0);
end;

{*******************************************************************************
function InConvo: Boolean;
by: ZephyrsFury
Description: Returns True if you're in a conversation with an NPC (your name
  is NOT in the bottom-left of the chat box).
*******************************************************************************}
function InConvo: Boolean;
var
  X, Y: Integer;
begin
  Result := (not(FindColor(X, Y, 0, 7, 460, 69, 474)));
end;

{*******************************************************************************
function AreTalking: Boolean;
By: Wizzup
Description: Checks if we're talking.
*******************************************************************************}

function AreTalking: Boolean;
var
   x, y: integer;
begin
  Result := FindColor(x, y, 128, 150, 250, 500, 380);
end;

{*******************************************************************************
function GetMusic: string;
by: Nielsie95 and ZephyrsFury
Description: Get the music in the area according to gametab 13.
*******************************************************************************}

function GetMusic: string;
var
  Pts: TPointArray;
  B: TBox;
begin
  if (GetCurrentTab <> tab_Music) then
  begin
    GameTab(tab_Music);
    Wait(500 + Random(500));
  end;
  if (FindColorsTolerance(Pts, 39401, 553, 242, 729, 264, 0)) then
  begin
    B := GetTPABounds(Pts);
    Result := Trim(GetTextAtEx(B.X1 - 1, 245, 0, UpChars, False, False, 0, 1, 39401, 50, False, tr_AllChars));
  end;
end;

{*******************************************************************************
function IntArrayMatch(Ar1, Ar2: TIntegerArray): Boolean;
by: Nielsie95
Description: Returns True if Ar1 is the same as Ar2.
*******************************************************************************}

function IntArrayMatch(Ar1, Ar2: TIntegerArray): Boolean;
var
  i, l: Integer;

begin
  Result := False;
  l := High(Ar1);
  if (l <> High(Ar2)) then exit;
  for i := 0 to l do
    if (not InIntArray(Ar2, Ar1[i])) then Exit;
  Result := True;
end;

{*******************************************************************************
Function AnalyzeObjects(Colours, Tolerances: T2DIntegerArray; Boxes: TBoxArray; Time: Integer): TRandomObjectArray;
By: marpis
Description: Analyzes measures and colours of rotating 3D objects in random events.
How To Use:
Var
  B: TBoxArray;
  C, T: T2DIntegerArray;
  B[0] := IntToBox(??, ??, ??, ??);   Different 3D objects inside these boxes
  B[1] := IntToBox(??, ??, ??, ??);   Can be as many as you like
  C[0] := [123123, 321321];           Colours used ONLY in box B[0]
  C[1] := [456456, 654654];           Colours used ONLY in box B[1]
  T[0] := [5, 10];                    In this case tolerance for colour
                                      C[0][0] = 5 And tolerance for colour
                                      C[0][1] = 10. Tolerances are declared
                                      individually for each colour.
Var
  MyObjects: TRandomObjectArray;
  MyObjects := AnalyzeObjects(C, T, B, 10000); <- Analyzes objects for 10 sec.

*******************************************************************************}
Function AnalyzeObjects(Colours, Tolerances: T2DIntegerArray; Boxes: TBoxArray; Interval, Time: Integer): TRandomObjectArray;
Var
  Hue, Sat, Lum, tmp_MinLum, tmp_MaxLum: Extended;
  T, Hi, tmp_Hi, I, II: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Widths, Heights, Counts, Colors: T2DIntegerArray;
  tmp_Colors: TIntegerArray;
  tmp_Box: TBox;
Begin
  T := GetSystemTime + Time;
  Hi := High(Boxes);
  SetLength(ATPA, Hi + 1);
  SetLength(Widths, Hi + 1);
  SetLength(Heights, Hi + 1);
  SetLength(Counts, Hi + 1);
  SetLength(Result, Hi + 1);
  SetLength(Colors, Hi + 1);

  While (GetSystemTime < T) Do
  Begin
    { Go through every box }
    For I := 0 To Hi Do
    Begin
      tmp_Hi := High(Colours[I]);

      { Gather all colours from box }
      ATPA[I] := [];
      For II := 0 To tmp_Hi Do
      Begin
        FindColorsTolerance(TPA, Colours[I][II], Boxes[I].X1, Boxes[I].Y1, Boxes[I].X2, Boxes[I].Y2, Tolerances[I][II]);
        ATPA[I] := CombineTPA(TPA, ATPA[I]);
      End;

      { Analyzing }
      tmp_Box := GetTPABounds(ATPA[I]);
      tmp_Hi  := High(Widths[I]) + 1;

      SetLength(Widths[I], tmp_Hi + 1);
      SetLength(Heights[I], tmp_Hi + 1);
      SetLength(Counts[I], tmp_Hi + 1);

               // Area size
      Widths[I][tmp_Hi]  := tmp_Box.X2 - tmp_Box.Y1;
      Heights[I][tmp_Hi] := tmp_Box.Y2 - tmp_Box.X1;
      Counts[I][tmp_Hi]  := Length(ATPA[I]);

               // Colours
      tmp_Colors := GetColors(ATPA[I]);
      tmp_Hi     := High(tmp_Colors);

      For II := 0 To tmp_Hi Do
        If (Not InIntArray(Colors[I], tmp_Colors[II])) Then
        Begin
          SetLength(Colors[I], Length(Colors[I]) + 1);
          Colors[I][High(Colors[I])] := tmp_Colors[II];
        End;

      Wait(Interval);
    End; // End of box searching

    { Calculating the results }
    For I := 0 To Hi Do
    Begin
      With Result[I] Do
      Begin
        { Avereages }
        tmp_Hi := High(Widths[I]);
        For  II := 0 To tmp_Hi Do
        Begin
          IncEx(AvgWidth, Widths[I][II]);
          IncEx(AvgHeight, Heights[I][II]);
          IncEx(AvgCount, Counts[I][II]);
        End;
        AvgWidth  := Round(AvgWidth div Length(Widths[I]));
        AvgHeight := Round(AvgHeight div Length(Heights[I]));
        AvgCount  := Round(AvgCount div Length(Counts[I]));

        { Luminances }
        tmp_Hi := High(Colors[I]);
        tmp_MaxLum := -1.0;
        tmp_MinLum := 100.0;

        For II := 0 To tmp_Hi Do
        Begin
          ColorToHSL(Colors[I][II], Hue, Sat, Lum);
          If (Lum < tmp_MinLum) Then
            tmp_MinLum := Lum
          Else
          If (Lum > tmp_MaxLum) Then
            tmp_MaxLum := Lum;
        End;
        MinLum := tmp_MinLum;
        MaxLum := tmp_MaxLum;

      End;
    End;

  End;
End;

{*******************************************************************************
Function WaitFindBitmapInBoxArray(BMP: Integer; B: TBoxArray; Tolerance, Time: Integer): Integer;
By: marpis
Description: Tries to find bitmap in box array B in Time milliseconds. Returns
             the index of the box where the bmp was found. Returns -1 if not
             found.
******************************************************************************}
Function WaitFindBitmapInBoxArray(BMP: Integer; B: TBoxArray; Tolerance, Time: Integer): Integer;
Var
  T, I, H, X, Y: Integer;
Begin
  T := GetSystemTime + Time;
  H := High(B);

  While (GetSystemTime < T) Do
  For I := 0 To H Do
  Begin
    If FindBitmapToleranceIn(BMP, X, Y, B[I].X1, B[I].Y1, B[I].X2, B[I].Y2, Tolerance) Then
    Begin
      Result := I;
      Exit;
    End;
    Wait(2);
  End;

  Result := -1;
End;

{*******************************************************************************
Function CompareInfo(Info: TRandomObjectArray; Optimal: TRandomObject; cWidth, cHeight, cCount, cMaxLum, cMinLum: Boolean): Integer;
By: marpis
Description: Compare during-runtime analyzed info to carefully considered optimal
             info. You can choose various ways of comparing objects.
             - cWidth   = Compare avereage TPA width
             - cHeight  = Compare avereage TPA height
             - cCount   = Compare avereage TPA length
             - cMaxLum  = Compare lightest colours found
             - cMinLum  = Compare darkest colours found

  Results the index in the 'Info'-Array of the most likely answer.
  Example:
  Var
    Fish, Ring, Shield: Integer;
    MyObjects, Optimals: TRandomObjectArray;

  With Optimals[0] Do  // Carefully gathered optimal info for Fish
  Begin
    AvgWidth   := 76;
    AvgHeight  := 22;
    ...
  End;

  MyObjects := AnalyzeObjects(C, T, B, 10000);
  Fish := CompareInfo(MyObjects, Optimals[0], True, True, False, False, True);
  FilterObject(MyObjects, Fish); // Remove the Fish info because it was already
                                    found. Otherwise it would cause trouble.

  If the fish was found successfully, we now know that the box B[Fish] has a
  fish spinning in it. Note that 'Fish' is an integer, thus allowing you to call
  for example MouseBox(B[Fish].X1, etc etc.)

*******************************************************************************}
Function CompareInfo(Info: TRandomObjectArray; Optimal: TRandomObject; cWidth, cHeight, cCount, cMaxLum, cMinLum: Boolean): Integer;
Var
  Widths, Heights, Counts, Score: TIntegerArray;
  MaxLums, MinLums: TExtendedArray;
  MinDiff, I, H: Integer;
Begin
  H := High(Info);
  SetLength(Widths, H + 1);
  SetLength(Heights, H + 1);
  SetLength(Counts, H + 1);
  SetLength(MaxLums, H + 1);
  SetLength(MinLums, H + 1);
  SetLength(Score, H + 1);

  { Gather info from all objects }
  For I := 0 To H Do
  Begin
    Widths[I]   := Info[I].AvgWidth;
    Heights[I]  := Info[I].AvgHeight;
    Counts[I]   := Info[I].AvgCount;
    MaxLums[I]  := Info[I].MaxLum;
    MinLums[I]  := Info[I].MinLum;
  End;

  If cWidth Then
  Begin
    { AvgWidth }
    For I := 0 To H Do
      If iAbs(Info[I].AvgWidth - Optimal.AvgWidth) < iAbs(Info[MinDiff].AvgWidth - Optimal.AvgWidth) Then
        MinDiff := I;
    Inc(Score[MinDiff]); MinDiff := 0;
  End;
  If cHeight Then
  Begin
    { AvgHeight }
    For I := 0 To H Do
      If iAbs(Info[I].AvgHeight - Optimal.AvgHeight) < iAbs(Info[MinDiff].AvgHeight - Optimal.AvgHeight) Then
        MinDiff := I;
    Inc(Score[MinDiff]); MinDiff := 0;
  End;
  if cCount Then
  Begin
    { AvgCount }
    For I := 0 To H Do
      If iAbs(Info[I].AvgCount - Optimal.AvgCount) < iAbs(Info[MinDiff].AvgCount - Optimal.AvgCount) Then
        MinDiff := I;
    Inc(Score[MinDiff]); MinDiff := 0;
  End;
  if cMaxLum Then
  Begin
    { MaxLum }
    For I := 0 To H Do
      If Abs(Info[I].MaxLum - Optimal.MaxLum) < Abs(Info[MinDiff].MaxLum - Optimal.MaxLum) Then
        MinDiff := I;
    Inc(Score[MinDiff]); MinDiff := 0;
  End;
  if cMinLum Then
  Begin
    { MinLum }
    For I := 0 To H Do
      If Abs(Info[I].MinLum - Optimal.MinLum) < Abs(Info[MinDiff].MinLum - Optimal.MinLum) Then
        MinDiff := I;
    Inc(Score[MinDiff]); MinDiff := 0;
  End;

  { Choose the option with the best score <> 0 }
  InIntArrayEx(Score, Result, AMax(Score));
  If (Score[Result] = 0) Then
    Result := -1;
End;

{*******************************************************************************
Procedure FilterObject(Var Objects: TRandomObjectArray; Index: Integer);
By: marpis
Description: Self explanatory
*******************************************************************************}
Procedure FilterObject(Var Objects: TRandomObjectArray; Index: Integer);
Begin
  If (Index >= 0) Then
  Begin
    Swap(Objects[High(Objects)], Objects[Index]);
    SetLength(Objects, High(Objects));
  End;
End;

{*******************************************************************************
Procedure DebugTRandomObject(Obj: TRandomObject);
By: marpis
Description: Used to debug info gathered from AnalyzeObjects()
How to use:
  1st gather info from boxes, to an array MyObjects, for example. Then do
  For I := 0 To High(MyObjects) Do
    DebugTRandomObject(MyObjects[I]);

  This way you can check what are the avereage values for some object's info.
  When you have gathered, debugged and saved info from objects several times and
  confirmed that their info doesn't vary from time to time, you can take avereages
  of these objects' infos and use them as an optimal.
{******************************************************************************}
Procedure DebugTRandomObject(Obj: TRandomObject);
Begin
  ClearDebug;
  WriteLn('With <<TRandomObject>> Do');
  WriteLn('Begin');
  With Obj Do
  Begin
    Writeln('  AvgWidth  := '+IntToStr(AvgWidth)+';');
    Writeln('  AvgHeight := '+IntToStr(AvgHeight)+';');
    Writeln('  AvgCount  := '+IntToStr(AvgCount)+';');
    Writeln('  MaxLum    := '+FloatToStr(MaxLum)+';');
    Writeln('  MinLum    := '+FloatToStr(MinLum)+';');
  End;
  WriteLn('End;');
  WriteLn('');
End;
